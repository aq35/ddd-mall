ドメイン駆動設計の基本原則は、１章、２章、３章に集約されています。

■ 原則その１：ドメインの知識をかみ砕く

・ドメイン（そのアプリケーションの対象領域）に関する「知識」を継続的に学ぶ
・ドメインの「知識」を広げながら掘り下げ、より深く理解する

　ドメインの知識の習得と理解は、どんな開発手法でも重要なテーマです。ドメイン駆動設計（あるいは、オブジェクト指向設計）では、コードを書く技術者が、自ら積極的にドメインの知識を学び続けることを重視します。

　開発者が要件定義書や仕様書がでてくるのを待つのは、ドメイン駆動設計のアプローチではありません。

■ 原則その２：言葉を使って意図を伝達する

・利用者やその分野に専門家と「言葉」を使って、活発な意図の伝達（コミュニケーション）を行う

　これは、XPなどのアジャイルな開発では、基本の活動です。

　ウォータフォール式の開発では、要件定義や分析は「フェーズ」でした。その「フェーズ」の成果物を「ドキュメント」としてまとめ、次のフェーズで（要件定義者とは別の）技術者に渡されます。

　ドメイン駆動設計はアジャイルなやり方が前提です。ドメイン駆動設計では、要件定義や分析は「フェーズ」ではありません。日々の「タスク」です。

　要件定義の成果物として、他者に引き渡すためのドキュメントは必要ありません。開発者が自ら獲得した業務の知識・理解を、そのままコードに書きとめます。そうやって作った業務知識が豊富なソフトウェアを動かしながら、業務の経験者やプロダクトオーナと活発に会話をして、さらに詳細に仕様を決めていきます。

　きれいにまとまった「ドキュメント」を作っても、関係者の間で、理解が食い違うことはよくあります。また、人間の作るものですので、ヌケモレや記述ミスがあちこちに潜んでいます。
　なによりも問題なのは、ドキュメントをいくら作っても、それだけではソフトウェアは動かないことです。

　不確実で役に立たない「ドキュメント」をせっせと作るよりも、関係者で会話して意図や仕様の詳細を確認したほうが、手っ取りばやいし、確実。つまり、費用対効果が高い。これが、XPで言葉を使った会話による意図伝達を重視する理由です。

■ 原則その３：モデルと実装を一致させる

　開発者が、業務知識を増やし、プロダクトオーナーの意図を正確に理解したら、それをそのままコードで表現するのが、ドメイン駆動設計の重要な原則です。

　開発者の業務知識の理解と、コード表現とは、ずれてしまうことが多い。
　業務知識は、その業務固有の考え方ややり方に基づく知識であり、その分野の業務用語を使います。プログラムのソースコードは、どうしても、コンピュータの仕組みや、プログラミング言語や言語仕様に引っ張られます。

　優秀な開発者であれば、頭の中の業務理解と、コンピュータよりのコード表現とを、無意識に変換できるかもしれません。

　しかし、これは危険です。　業務の知識を表現できてないコードは、後になって、コード内容を理解したり、機能の追加や修正をやろうとした時に、意味が不明なコードだらけになりがちです。それが、ソフトウェアの変更コストをあげる大きな原因になります。

・どこになにが書いてあるかわからない
・業務的には単純なことが、プログラムのあちこちを修正しないと実現できない
・うっかり変更すると、わけのわからないところに影響がでた
...

　こういうことを防ぐために、コード、特にドメイン層のプログラムは、業務知識、業務を理解した概念モデルを、そのままコードで表現することにこだわります。

　これがドメイン駆動設計の基本原則です。