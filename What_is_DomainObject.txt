ドメインオブジェクト
Entity・ValueObject・Serviceを指す

アンチパターン：ドメインオブジェクトの getter/setter
------------------------------------------------------------
・ValueObjectを使っているのであれば、setter は使う機会はありません。
(ValueObjectは、パラメータ付のコンストラクタで生成した不変型のオブジェクトを扱います。)
・ValueObjectから取り出す以外でgetterも利用する機会はないはず。

アンチパターン：どこでも業務ロジック
------------------------------------------------------------
UI に、業務判断の if 文がある。
例：ロールが承認者で、状態が承認待ち、だったら承認ボタンを enable にする。

データアクセス（ＳＱＬ文）に、業務判断の where 文がある。
例：申込日が、締切の一ヶ月以上前だったら、早期申込みフラグを1 にする。

テーブルに、業務ルールのトリガーがある。
例：１０万円以上の購入依頼があったら、上長承認依頼レコードを作成する

ドメインオブジェクトが、こういう知識・判断力を持つべき。
UIやSQL文で、この業務知識を利用するなら、業務判断能力があるドメインオブジェクトから、判断結果をもらうようにする。

アンチパターン：ドメイン層が分離できていない
------------------------------------------------------------
Web アプリケーションだと、HTTPRequest・Session・データベースアクセスなどの関心事と、業務の知識や業務ルールが、同じクラスやパッケージに混在している。
ひどい症状だと、メソッドの中に、業務判断の if 文と HTML 生成コードが、いっしょになっていたりする。
ドメイン駆動設計の場合「ドメイン層」を、それ以外の層から分離・独立させる。
ドメイン層が「独立する」とは、他の層がドメイン層に依存する、ということ。
ドメイン層が他の層に依存してはいけない。
